// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum Designation {
  COMPANY
  PERSON
}

model User {
  id            Int             @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  designation   Designation
  companyName   String?
  activated     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  author        Author?
  activateToken ActivateToken[]
}

model Author {
  id        Int      @id @default(autoincrement())
  blocked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  Int     @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews Review?
}

model Review {
  id        Int      @id @default(autoincrement())
  title     String
  rating    Int
  body      String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int    @unique
  author   Author @relation(fields: [authorId], references: [id])
}

model Newsletters {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
