// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum ReviewStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Designation {
  COMPANY
  PERSON
}

enum TokenType {
  ACTIVATE
  RESET_PASSWORD
}

model User {
  id             Int         @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String      @unique
  password       String
  profilePicture String?
  role           Role        @default(USER)
  designation    Designation
  companyName    String?
  activated      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  author            Author?
  verificationToken VerificationToken[]
  chats             Chat[]              @relation("ChatParticipants")
  chatMessages      Message[]           @relation("ChatMessages")
}

model Chat {
  id        Int      @id @default(autoincrement())
  title     String
  creatorId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants User[]    @relation("ChatParticipants")
  messages     Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  readed    Boolean  @default(false)
  createdAt DateTime @default(now())

  chatId Int
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User @relation("ChatMessages", fields: [userId], references: [id])
}

model Author {
  id        Int      @id @default(autoincrement())
  blocked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  Int      @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews Review[]
}

model Review {
  id        Int          @id @default(autoincrement())
  title     String
  rating    Float
  content   String
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  authorId Int
  author   Author @relation(fields: [authorId], references: [id])
}

model Newsletters {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  type        TokenType
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
